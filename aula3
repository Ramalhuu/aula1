// const saudar = function(nome){
//     return `Olá, ${nome}, seja bem vindo!`

// }

// console.log(saudar(nome))
// let nome = daniel

// function exibirtarefa(id, titulo, prioridade){
//     if(!id || !titulo || prioridade){
//         console.error("Valores não foram informados!")
//         return false
//     }

//     console.log(`Tarefa #${id}: ${titulo}(prioridade ${prioridade}) na FIAP`)
// }

// exibirtarefa(1, 'Estudar Js', 'alta')

// Função que calcula estatísticas básicas de um array de números
// function calcularEstatisticas(numeros) {
//     let soma = 0;
//     let min = numeros[0];
//     let max = numeros[0];
    
//     // Itera pelo array para acumular a soma e atualizar os valores de min e max
//     for (let i = 0; i < numeros.length; i++) {
//       soma += numeros[i];
//       if (numeros[i] < min) {
//         min = numeros[i];
//       }
//       if (numeros[i] > max) {
//         max = numeros[i];
//       }
//     }
    
//     const media = soma / numeros.length;
    
//     // Retorna os resultados em um objeto
//     return { soma, media, min, max };
//   }
  
//   const resultados = calcularEstatisticas([5, 10, 15, 20, 25]);
//   console.log(resultados);

//Demonstração de "this" em função tradicional vs. arrow function
const contador = {
  valor: 0,
  incrementarTradicional: function() {
    setTimeout(function() {
      // Neste caso, "this" não se refere ao objeto "contador"
      console.log("Valor (tradicional):", this.valor);
    }, 100);
  },
  incrementarArrow: function() {
    setTimeout(() => {
      // A arrow function preserva o contexto do objeto "contador"
      this.valor++;
      console.log("Valor (arrow):", this.valor);
    }, 100);
  }
};
contador.incrementarTradicional();
contador.incrementarArrow();
